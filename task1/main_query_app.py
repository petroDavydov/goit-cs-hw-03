from queries import *
from config import DB_PARAMS
import psycopg2


def show_menu():
    print(" ... –í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é ...:")
    print("0. –í–∏—Ö—ñ–¥")
    print("1. –ü–æ–∫–∞–∑–∞—Ç–∏ —Ç–∞–±–ª–∏—Ü—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤")
    print("2. –ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å–∏")
    print("3. –ü–æ–∫–∞–∑–∞—Ç–∏ —Ç–∞–±–ª–∏—Ü—é –∑–∞–≤–¥–∞–Ω—å")
    print("4. –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –ø–µ–≤–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
    print("5. –í–∏–±—Ä–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è –∑–∞ –ø–µ–≤–Ω–∏–º —Å—Ç–∞—Ç—É—Å–æ–º")
    print("6. –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–≤–¥–∞–Ω–Ω—è")
    print("7. –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –±–µ–∑ –∑–∞–≤–¥–∞–Ω—å")
    print("8. –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è")
    print("9. –ù–µ–∑–∞–≤–µ—Ä—à–µ–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è")
    print("10. –í–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è")
    print("11. –ó–Ω–∞–π—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ email")
    print("12. –û–Ω–æ–≤–∏—Ç–∏ —ñ–º‚Äô—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
    print("13. –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–≤–¥–∞–Ω—å –ø–æ —Å—Ç–∞—Ç—É—Å–∞—Ö")
    print("14. –ó–∞–≤–¥–∞–Ω–Ω—è –ø–æ –¥–æ–º–µ–Ω—É –ø–æ—à—Ç–∏")
    print("15. –ó–∞–≤–¥–∞–Ω–Ω—è –±–µ–∑ –æ–ø–∏—Å—É")
    print("16. –ó–∞–≤–¥–∞–Ω–Ω—è —É —Å—Ç–∞—Ç—É—Å—ñ 'in progress'")
    print("17. –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–≤–¥–∞–Ω—å –∫–æ–∂–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")


def execute_query(query: str):
    try:
        conn = psycopg2.connect(**DB_PARAMS)
        cur = conn.cursor()
        cur.execute(query)
        rows = cur.fetchall()
        for row in rows:
            print(row)
        cur.close()
        conn.close()
    except Exception as e:
        print(f" !!! –ü–æ–º–∏–ª–∫–∞: {e} !!!")


def run():
    while True:
        show_menu()
        choice = input("–í–∞—à –≤–∏–±—ñ—Ä: ").strip()

        if choice == "0":
            print("üëã –í–∏—Ö—ñ–¥ –∑ –ø—Ä–æ–≥—Ä–∞–º–∏.")
            break

        elif choice == "1":
            execute_query("SELECT * FROM users;")

        elif choice == "2":
            execute_query("SELECT * FROM status;")

        elif choice == "3":
            execute_query("SELECT * FROM tasks;")

        elif choice == "4":
            user_id = input("–í–≤–µ–¥—ñ—Ç—å user_id: ")
            execute_query(all_from_specific_user(user_id))

        elif choice == "5":
            status_id = input("–í–≤–µ–¥—ñ—Ç—å status_id: ")
            execute_query(status_specific_task(status_id))

        elif choice == "6":
            task_id = input("–í–≤–µ–¥—ñ—Ç—å task_id: ")
            status_id = input("–ù–æ–≤–∏–π status_id: ")
            execute_query(update_status_task(task_id, status_id))

        elif choice == "7":
            execute_query(users_without_tasks())

        elif choice == "8":
            user_id = input("user_id: ")
            title = input("title: ")
            description = input("description: ")
            status_id = input("status_id: ")
            execute_query(add_new_task_for_user(
                user_id, title, description, status_id))

        elif choice == "9":
            execute_query(not_completed_tasks())

        elif choice == "10":
            task_id = input("id –∑–∞–≤–¥–∞–Ω–Ω—è: ")
            execute_query(delete_task(task_id))

        elif choice == "11":
            email = input("Email –∞–±–æ –¥–æ–º–µ–Ω: ")
            execute_query(find_users_by_email(email))

        elif choice == "12":
            user_id = input("user_id: ")
            new_name = input("–ù–æ–≤–µ —ñ–º‚Äô—è: ")
            execute_query(update_user_name(user_id, new_name))

        elif choice == "13":
            execute_query(count_tasks_by_status())

        elif choice == "14":
            domain = input("–î–æ–º–µ–Ω —á–∏  –∫—Ä–∞—â–µ –ø–æ—à—Ç—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, @gmail.com): ")
            execute_query(find_user_by_email_domain(domain))

        elif choice == "15":
            execute_query(tasks_without_description())

        elif choice == "16":
            execute_query(user_in_progress_tasks())

        elif choice == "17":
            execute_query(user_tasks_count())

        else:
            print(" –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞ –∞–±–æ —Ç–µ—Å—Ç—É—î—Ç—å—Å—è.")


if __name__ == "__main__":
    run()
